- Promise: được sinh ra để xử lý các thao tác bất đồng bộ, trước khi có promise thì chỉ dùng callback, nhưng khi sử dụng callback thì có 1 vấn đề đó là callback hell(callback hell là lồng các callback với nhau)
    + sync(đồng bộ): code vào viết trước thì chạy trước
        ex: 
            console.log(1);
            console.log(2);       
    + async(bất đồng bộ): những hàm bất đồng bộ setTimeout, setInterval, fetch, XMLHtpprequest, file reading, request animation frame...
        ex:
            setTimeout(function(){
                console.log(1);
            });
            console.log(2);
    + nỗi đau:
        - vấn để khi sử dụng callback: callback hell (những việc được chạy tuần tự và callback sẽ lồng nhau)
            setTimeout(function(){
                console.log(1);
                setTimeout(function(){
                    console.log(2);
                    setTimeout(function(){
                        console.log(3);
                        setTimeout(function(){
                            console.log(4);
                        }, 1000);
                    }, 1000);
                }, 1000);
            }, 1000);
    + cách hoạt động của Promise
        - promise có 3 trạng thái:
            1. Padding(chờ) // là trạng thái không trả về resolve() hay reject()
            2. Fulfilled // là trạng thái thành công, trả về resolve()
            3. Rejected //  là trạng thái thất bại, trả về reject()
        - tạo promise: trong Promise sẽ nhận 1 function được gọi là executor, trong executor nhận 2 tham số dạng function là resolve và reject 
            var promise = new Promise(
                // executor
                function(resolve, reject){ // resolve, reject là function
                    // logic xử lý...
                    // thành công: resolve(); // logic thành công
                    // thất bại: reject(); // logic thất bại
                }
            );
            promise // sau khi xử lý logic xong sẽ trả về một biến promise
                .then(function(){ //khi biến promise trả về resolve()(thành công) thì .then(function(){}) sẽ tự động được gọi
                    ...
                }) 
                .catch(function(){ //khi biến promise trả về reject()(thất bại) thì .catch(function(){}) sẽ tự động được gọi
                    ...
                })
                .finally(function(){ //dùng biến promise trả về resolve() hay reject() thì .finally(function(){}) cũng sẽ tự động được gọi
                    ...
                })

        - ex1: trả về resolve() hoặc reject();
            var promise = new Promise(
                function(resolve, reject){
                    resolve();
                }
            )
            promise
                .then(function(){
                    console.log('successully!');
                })
                .catch(function(){
                    console.log('failure!');
                })
                .finally(function(){
                    console.log('done!');
                })

        - ex2: trả dữ liệu từ executor ra .then(function(){}) hoặc .catch(function(){})
            var promise = new Promise(
                function(resolve, reject){
                    resolve(['HTML','CSS','JS']);
                    // hoặc reject('lỗi rồi !');
                }
            )
            promise
                .then(function(laguages){
                    console.log(laguages);
                })
                .catch(function(error){
                    console.log(error);
                })
                .finally(function(){
                    console.log('done!');
                })
    + CHAIN: là tính chất nếu resolve thì promise có thể chạy nhiều .then(function(){}) liên tiếp 
        - ex1: promise có thể có nhiều .then(function(){})
            var promise = new Promise(
                function(resolve, reject){
                    resolve();
                }
            )
            promise
                .then(function(){
                    console.log(1);
                })
                .then(function(){
                    console.log(2);
                })
                .then(function(){
                    console.log(3);
                })
                .catch(function(){
                    console.log('loi!');
                })
                .finally(function(){
                    console.log('done!');
                })
        - ex2: cái return của callback .then(function(){}) thứ nhất thì callback .then(function(){}) thứ 2 sẽ nhận được giá trị đó...Tính chất này khắc phục callback hell
            var promise = new Promise(
                function(resolve, reject){
                    resolve('console.log từ 1-3');
                }
            )
            promise
                .then(function(start){
                    console.log(start);
                    return 1;
                })
                .then(function(data){
                    console.log(data);
                    return 2;
                })
                .then(function(data){
                    console.log(data);
                    return 3;
                })
                .then(function(data){
                    console.log(data);
                })
                .catch(function(){
                    console.log('loi!');
                })
                .finally(function(){
                    console.log('done!');
                })
        - ex3: nếu .then(function(){}) thứ nhất return Promise thì thằng .then(function(){}) thứ 2 sẽ nhận được promise từ thằng .then(function(){}) thứ nhất
            var promise = new Promise(
                    function(resolve, reject){
                        resolve();
                    }
                )
                promise 
                    .then(function(){
                        return new Promise(function(resolve){
                            setTimeout(function(){
                                resolve([1,2,3,4]);
                            }, 2000);   
                        })
                    })
                    .then(function(array){
                        console.log(array);
                    })
                    .catch(function(){
                        console.log('loi!');
                    })
                    .finally(function(){
                        console.log('done!');
                    })
        - ex4: console.log từ 1->4 deplay 1s
            function sleep(millisecond){
                return new Promise(function(resolve){
                    setTimeout(resolve, millisecond);
                });
            }
            sleep(1000) // function sleep(1000) sẽ trả về 1 promise
                .then(function(){
                    console.log(1);
                    return sleep(1000); // function sleep(1000) sẽ trả về 1 promise
                })
                .then(function(){
                    console.log(2);
                    return sleep(1000); // function sleep(1000) sẽ trả về 1 promise
                })
                .then(function(){
                    console.log(3);
                    return sleep(1000); // function sleep(1000) sẽ trả về 1 promise
                })
                .then(function(){
                    console.log(4);
                })
                .catch(function(){
                    console.log('loi!');
                })
                .finally(function(){
                    console.log('done!');
                })
        - ex5: khi có một .then return promise reject() thì dừng ngay và .catch sẽ được tự động gọi
            var promise = new Promise(
                function(resolve, reject){
                    resolve(1);
            })
            promise 
                .then(function(data){
                    console.log(data);
                    return(2);
                }) 
                .then(function(data){
                    console.log(data);
                    return new promise(function(resolve, reject){
                        reject(); // tới .then thứ 2 thì reject và ngưng luôn các .then còn lại 
                    });
                }) 
                .then(function(data){
                    console.log(data);
                })
                .catch(function(){
                    console.log('loi!');
                })
                .finally(function(){
                    console.log('done!');
                })  
    + promise.resolve // tạo 1 promise resolve() nhanh gọn, khi không cần xử lý logic
        var promise = Promise.resolve('Success!');
        promise
            .then(function(result){
                console.log(result);
            })    
    + promise.reject // tạo 1 promise reject() nhanh gọn, khi không cần xử lý logic
        var promise = Promise.reject('error!');
        promise
            .catch(function(result){
                console.log(result);
            })   
    + promise.all // chạy song song các việc, các việc này không phụ thuộc nhau. Sau khi chạy xong các việc sẽ tạo ra các kết quả, và các kết quả này được dùng chung
