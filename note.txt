* tham trị (không thay đổi) và tham chiếu (thay đổi) 
- tham trị(primitive types): kiểu dữ liệu number hoặc string, các biến sẽ được lưu vào stack, nếu có phép gán giữa các biến thì biến gán sẽ copy biến được gán, các biến này độc lập với nhau nên sẽ không bị ảnh hưởng khi biến gán thay đổi giá trị.
- tham chiếu(reference types): kiễu dữ liệu object (object, array, function), các biến được lưu vào stack nhưng element(mảng) hoặc value(object) thì lại được lưu vào heap. biến trong stack sẽ trỏ tới element hoặc value tương ứng, nếu có phép gán giữa các biến thì biến gán sẽ trỏ tới element hoặc value của biến được gán. Vì vậy khi element hoặc value của biến được gán thay đổi thì các biến gán cũng sẽ thay đổi theo

* các hàm built-in (hàm có sẵn)
- alert
- console
- confirm (xác nhận)
- prompt (lời nhắc)
- setTimeout (đặt thời gian chờ)
- setInterval (đặt khoảng thời gian)
    + console.log() // : in ra một chuỗi hoặc biến, mảng, oject,... ở console
    + console.warn() // : giống giống console.log() // + console.error() // : giống giống console.log() // + confirm() // : ra một chuỗi hoặc biến hiện popup để người dùng xác nhận
    + prompt() // : giống confirm() // nhưng có thêm input
    + setTimeout(function() {...}, <mini giây>) : thực hiện một function sau một khoảng thời gian (mini giây)
        ex: setTimeout(function() {
            alert('hello');
        }, 1000);
        --> sau 1 giây sẽ hiện ra thông báo 'hello'
    + setInterval(function() {...}, <mini giây>) : thực hiện liên tục một function sau một khoảng thời gian (mini giây)
            ex: setInterval(function(){
                alert('hello');
            }, 1000);
        --> hiện ra thông báo 'hello' liên tục trong 1 giây
- toán tử ++ -- tiền tố và hậu tố     
- nối chuỗi: chuỗi + chuỗi
- in ra dấu nháy đơn \' hoặc nháy kép \" (backslash)
- 6 giá trị được JS convert là false
    + false
    + 0
    + chuỗi trỗng '' hoặc ""
    + undefined
    + NaN //đại diện cho một số không hợp lệ
    + null
- Truthy và Falsy:
    + Truthy: là bất cứ giá trị nào trong JS khi chuyển đổi sang boolean mà có giá trị là true thì ta gọi đó là giá trị Truthy
        ex: 1, ['mảng'], {key: 'value'}, 'chuỗi'
    + Falsy: là bất cứ giá trị nào trong JS khi chuyển đổi sang boolean mà có giá trị là false thì ta gọi đó là giá trị Falsy
        ex: false, 0, '' or "", null, undefined, NaN
- các kiểu dữ liệu:
    1. dữ liệu nguyên thuỷ - primitive data
        + number
            ex: var a = 1;
        + string
            ex: var a = 'tonii'; b = '123';
        + boolean    
            ex: var a = true; b = false
        + undefined
            ex: var a;
        + null
            ex: var a = null;
        + symbol
            ex: var a = symbol('a') // unique
    2. dữ liệu phức tạp - complex data (có thể chứa các kiểu dữ liệu khác nhau chung object hoặc array)
        + function
            ex: myFunction = function(){
                ...
            }
            myFunction(); // call function
        + object type
            - object
            ex: myObject = {
                name: 'tonii',
                age: 19,
                address: 'can tho',
                myFunction: function // {
                    ...
                }
            };
            --> gồm key và value

            - array
            ex: myArray = [
                'tonii',
                19, 
                'can tho'
            ];
        --> so sánh bằng giữa 2 mảng hoặc 2 object với nhau sẽ luôn luôn là false, vì bọn nó là kiểu dữ liệu phức tạp và được lưu ở 2 địa chỉ khác nhau. chỉ có kiểu dữ liệu nguyên thuỷ mới so sánh được. nếu muốn so sánh kiểu dữ liệu phức tạp thì chuyển nó về dạng JSON    
- hàm kiểm tra có phải array: Array.isArray(<biến array>);            
- cách kiểm tra kiểu dữ liệu của 1 biến: typeof
    ex:
        a = 1;
        console.log(typeof a);
- toán tử so sánh tuyệt đối === và !== là so sánh giá trị và kiểu dữ liệu của 2 biến

-----CHUỖI-----
- template string: nối chuỗi với biến trong dấu huyền 
    ex: 
        var a = 'thanh';
        var b = 'toan';
        console.log(`Toi la:  ${a} ${b}`);
        --> Toi la thanh toan
- length:
    + chuỗi.length là độ dài của chuỗi

- lấy một từ trong chuỗi thông qua index:
    ex: var myString = 'toan';
        myString[2];
        --> a

- indexOf: in ra vị trí của chuỗi, không tìm được sẽ in ra -1
    + chuỗi.indexOf('<chuỗi muốn tìm>');
    --> in ra vị trí của chuỗi tìm được

    + chuỗi.indexOf('<chuỗi muốn tìm>', <vị trí bắt đầu tìm>);
    --> tìm chuỗi từ vị trí bắt đầu kể từ <chuỗi muốn tìm> 

    + chuỗi.lastIndexOf('<chuỗi muốn tìm>')
    --> in ra vị trí cuối cùng của chuỗi cần tìm      

- slice: lấy chuỗi
    + chuỗi.slice(<vị trí bắt đầu>, <ví trí kết thúc>) // nếu bỏ tham số thứ 2 thì nó lấy <vị trí bắt đầu> đến hết chuỗi
    + chuỗi.slice(0) // lấy hết chuỗi
    --> có thể cắt chuỗi ngược từ phải sang trái bắt đầu từ 0 đếm ngược về âm

- replace: thay thế chuỗi
    + chuỗi.replace('<chuỗi được thay thế>', '<chuỗi thay thế>'); 
    --> thay thế chuỗi được tìm thấy đầu tiên
    + chuỗi.replace(/<chuỗi được thay thế>/g, '<chuỗi thay thế>');
    --> dùng biểu thức chính quy thay thế tất cả các chuỗi được tìm thấy

- upper, lower case: chữ thường thành chữ hoa, chữ hoa thành chữ thường
    + chuỗi.toUpperCase(); 
    + chuỗi.toLowerCase();

- trim: bỏ đi khoảng trắng thừa 2 đầu của chuỗi
    chuỗi.trim();

------MẢNG------
- call function: myFunction(); // cặp ngoặc là được gọi là call
- split: biến chuỗi thành mảng thông qua một điểm chung
    ex: languages = 'JS, PHP, C++'; // điểm chung là ', '(dấu phẩy và khoảng trắng)
        languages.split(', ');
        --> ["JS", "PHP", "C++"];
    ex: languages = "thanhtoan";    
        languages.split(''); // lấy từng ký tự trong chuỗi
        --> ["t", "h", "a", "n", "h", "t", "o", "a", "n"]
- hàm join: biến mảng thành chuỗi thông qua điểm chung, cơ chế giống giống hàm split
    ex: var a = [1,2,3];
        a.join();
        --> 1,2,3    
    ex: var a = ['html', 'css', 'js'];
        a.join(', ');
        --> html, css, js
- charAt: lấy một ký tự tại index
    ex: languages = "thanhtoan";
        languages.charAt(0);
        --> t
- note: mảng trong JS có thể chứa tất cả các kiểu dữ liệu khác nhau trong cùng một mảng
- các function trùng tên thì function sau cùng sẽ đè tất cả
- toString(): biến mảng thành chuỗi
    ex: var a = [1,2,3,4];
        a.toString();
        --> 1,2,3,4
- <mảng>.pop(); // xoá element cuối mảng và trả về element đã xoá (ngược lại với shift)
    -> mảng trống mà xoá thì sẽ undefined
- <mảng>.push(<element1>, <element2>,...); // thêm một hoặc nhiều phần tử vào cuối mảng (ngược lại với unshift)
- <mảng>.shift(); // xoá element đầu mảng và trả về element đã xoá (ngược lại với pop)
    -> mảng trống mà xoá thì sẽ undefined
- <mảng>.unshift(<element1>, <element2>,...); // thêm một hoặc nhiều phần tử vào đầu mảng(ngược lại với push)
- splice (F8 JS "làm việc với mảng" phút thứ 10)
    + splice 2 tham số: xoá phần tử theo index
        -> <mảng>.splice(<index bắt đầu xoá>, <số lượng element sẽ xoá kể từ index>);
            ex: var a = [1,2,3,4];
                a.splice(1,2);
                --> [1, 4]
    + splice 3 tham số: xoá phần tử theo index và chèn thêm phần tử mới đúng vào vị trí vừa xoá
        -> <mảng>.splice(<index bắt đầu xoá>, <số lượng element sẽ xoá kể từ index>, <các element sẽ chèn>);
            ex: var a = [1,2,3,4];
                a.splice(1,2,7,8,9,10);
                --> [1,7,8,9,10,4]
- concat: nối 2 mảng <mảng1>.concat(<mảng2>);
- slice: cắt mảng <mảng>.slice(<index bắt đầu cắt>, <cắt tới index>) giống slice chuỗi

- truyền tham số vào function: có thể truyền được tất cả các kiểu dữ liệu 
    ex: function writeLog(message){
        console.log(message);
    }
    writeLog('test message');
- arguments: gọi hàm truyền được nhiều đối số, nhưng hàm thì không cần tham số(chỉ dùng được cho regular function, arrow function không dùng được)
- hoisting: nghĩa là dù khai báo ở đâu thì biến hoặc function đều sẽ được đem lên đầu scope trước khi code được thực hiện (lên trang viblo để xem ví dụ), biến thì chỉ hoist phần khai báo, chứ không hoist phần gán biến 
- declaration function: dùng được hoisting
    function myFunction() {
        ... 
    }   
- expression function: không dùng được hoisting
    var myFunction = function(){
        ...
    }
    
    setTimeout(function myFunction(){ //call back
        ...
    })

    var myObject = {
        myFunction: function(){
            ...
        }
    }
- Math.pow(x, n): x mũ 
- BigInt:
    ex: var million = 1e6; // 1000000
        var bilion = 1e9; // 1000000000
- Number.isFinite(<số hoặc biến>) // Xác định xem giá trị đã cho có phải là số hữu hạn hay không. Trả về boolean
- Number.isInteger(<số hoặc biến>) // Xác định xem giá trị đã cho có phải là số nguyên hay không. Trả về boolean
- parseFloat(<số hoặc biến>) // Chuyển đổi chuỗi đã cho thành một số dấu phẩy động
- parseInt(<số hoặc biến>) // Chuyển đổi chuỗi đã cho thành một số nguyên
- hàm làm tròn số thập phân nhưng sẽ bị chuyển sang kiểu string: <số>.toFixed // ; // nhỏ hơn 5 thì làm tròn dưới và ngược lại 
- hàm lấy số thập phân sau dấu phẩy <số>.toFixed(2); // lấy 2 số thập phân sau dấu phẩy
- <số hoặc biến>.toString() // đổi số thành chuỗi
- hàm kiểm tra NaN: isNaN();

----OBJECT----
- object để lưu thông tin của một đối tượng gồm key và value
    ex: var myInfo = {
            name: 'Thanh Toan',
            age: '19',
            address: 'Can Tho'
        }
- hàm lấy các key trong 1 object:  Object.keys(<object>);
- hàm lấy các value trong 1 object:  Object.values(<object>); 
- thêm key và value từ object đã có: <object>.<key mới> = '<value mới>';
    ex: myInfo.email = 'toan@gmail.com';
- nếu tên key có ký tự đặc biệt thì dùng cách này: <object>['<key mới>'] = '<value mới>';
    ex: myInfo['my-email'] = 'toan@gmail.com'; 
- lấy value thông qua key: <object>.<key> hoặc <object>['<tên key có ký tự đặc biệt>']
    ex: myInfo.name hoặc myInfo['my-email']
- delete <object>.<key> : xoá một key trong object
- value là một function:
    ex: var myInfo = {
            name: 'Thanh Toan',
            age: '19',
            address: 'Can Tho',
            getName: function(){
                return this.name;
            }
        }
        --> key getName có value là một function trả value name
- các function trong object được gọi là PHƯƠNG THỨC(method), còn lại được gọi là thuộc tính attribute/property
    ex: var myInfo = {
            name: 'Thanh Toan', // attribute
            age: '19', // attribute
            address: 'Can Tho', // attribute
            getName: function(){ // method
                return this.name;
            }
        }
- object constructor: khởi tạo đối tượng (lai lai constructor bên OOP), nhiều object sẽ dùng chung 1 constructor
    ex: + tạo constructor
            function User(firstName, lastName, avatar){ // tên object constructor phải viết hoa chữ cái đầu (quy ước)
                this.firstName = firstName;
                this.lastName = lastName;
                this.avatar = avatar;
                this.getFullName = function() {
                    return this.firstName + this.lastName;
                }
            }
        + tạo object từ constructor
            var admin = new User('Thanh', 'Toan', 'avatar1');
            var client =  new User('Minh', 'Hung', 'avatar2');
            admin.age = 20; // thêm thuộc tính riêng của admin
            client.address = 'Ho Chi Minh'; // thêm thuộc tính riêng của client
            delete admin.avatar; // xoá thuộc tính avatar của admin
- object prototype: dùng để khởi tạo thuộc tính có value cứng và phương thức cho object constructor đã có, nó khác với object constructor là không thể truyền được tham số, mà chỉ fix cứng value
    ex: + tạo thêm thuộc tính và phương thước cho object constructor
    function User(firstName, lastName, avatar){
        this.firstName = firstName;
        this.lastName = lastName;
        this.avatar = avatar;
    };
    User.prototype.className = 'F8';
    User.prototype.getLastName = function() {
        return this.lastName;
    }
    --> tạo thêm thuộc tính và phương thức bên ngoài constructor dùng prototype và các object điều sẽ được thừa hưởng 
    var admin = new User('Thanh', 'Toan', 'avatar1');
    var client =  new User('Minh', 'Hung', 'avatar2');
    console.log(admin, client); // class Name = 'F8' và getLastName nằm trong prototype của dev tool
    console.log(admin.getLastName(), client.getLastName()); // in ra lastName
- Array.property.<tên thuộc tính hoặc phương thức> = <thuộc tính hoặc phương thức>; //các thuộc tính và phương thức này không nằm trong element mà nằm trong property
    ex1: thêm thuộc tính cho các mảng
    Array.prototype.myNumber = 10;
    var a = [2,3,4];
    var b = [3,4,5];
    
    ex2: thêm phương thức cho các mảng
    Array.prototype.myFunction = function(){
        return 10;
    };
    var a = [2,3,4];
    var b = [3,4,5];
- object Date: là một hàm object constructor
    + new Date() // trả về thời gian hiện tại (thứ ngày tháng năm giờ phút giây)
        ex: var date = new Date();
            console.log(date);
    + new Date().getFullYear(); // lấy năm
    + new Date().getMonth() + 1; // lấy tháng (vì hàm getMonth() chỉ có từ 0-11)
    + new Date().getDate(); // lấy ngày
    + new Date().getHours(); // lấy giờ
    + new Date().getMinutes(); // lấy phút
    + new Date().getSeconds(); // lấy giây
- Math object: là hàm built-in, không phải object constructor
    + Math.PI // trả về số PI
    + Math.round(<số>) // làm tròn số, <= 0.4 thì làm tròn dưới, >= 0.5 thì làm tròn trến
    + Math.abs(<số>) // số tuyệt đối
    + Math.ceil(<số>) // làm tròn trên, số phẩy nhỏ đến mấy cũng làm tròn trên
    + Math.floor(<số>) // làm tròn dưới
    + Math.random() // trả về số thập phân ngẫu nhiên nhỏ hơn 1
        ex: số ngẫu nhiên từ 0-10
            Math.floor(Math.random() * 10);
    + Math.min(<các số>) // trả về số nhỏ nhất trong các số
        ex: var nhoNhat = [1, 2, 3, 4, 5, 6];
            console.log(Math.min(...nhoNhat)); // dùng dấu 3 chấm mới truyền được mảng
    + Math.max(<các số>) // trả về số lớn nhất trong các số
        ex: var lonNhat = [1, 2, 3, 4, 5, 6];
        console.log(Math.max(...lonNhat)); // dùng dấu 3 chấm mới truyền được mảng

- Object.assgin({}, obj1, obj2,...): dùng để nối 2 object với nhau, đối số thứ nhất là 1 initial, còn các tham số còn lại là các object đã có sẽ được nối
    ex:
        var obj1 = {
            name: 'Sơn Đặng',
        }
        var obj2 = {
            age: 18,
        }
        var obj = Object.assign({}, obj1, obj2); // obj = {name: 'Sơn Đặng', age: 18}
        
- Ternary operator(toán tử 3 ngôi): cơ chế hoạt động giống IF ELSE nhưng ngắn gọn hơn, nên dùng trong những trường hợp đơn giản
    ex: var n = 8;
    (n > 10) ? console.log("n lớn hơn 10") : console.log("n nhỏ hơn 10");

- LOOP:
    + for: lặp với điều kiện đúng
        ex: for(var i = 0; i <= 10; i++){
            console.log(i);
        }
    + for/in: lặp qua từng key của đối tượng dưới dạng chuỗi, thường dùng cho object và mảng hoặc chuỗi
        ex1: in ra key của 1 object
        var myInfo = {
            name: 'Thanh Toan',
            age: 19,
            address: 'Can Tho'
        }
        for(var key in myInfo){
            console.log(key);
        }

        ex2: in ra value của 1 object thông qua key
        var myInfo = {
            name: 'Thanh Toan',
            age: 19,
            address: 'Can Tho'
        }
        for(var key in myInfo){
            console.log(myInfo[key]);
        }

        ex3: in ra index của 1 mảng
        var languages = [
                'C++',
                'JS',
                'PHP'
        ];
        for(var index in languages){
            console.log(index);
        }
        
        ex4: in ra các element của 1 mảng thông qua index
        var languages = [
            'C++',
            'JS',
            'PHP'
        ]
        for(var index in languages){
            console.log(languages[index]);
        }

        ex5: in ra từng index của 1 chuỗi
        var name = 'thanhtoan';
        for(var index in name){
            console.log(index);
        }
    + for/of: lặp qua từng value của object, từng element của mảng, từng chữ cái của chuỗi
        ex1: in ra từng element của mảng
        var languages = [
            'C++',
            'JS',
            'PHP'
        ];
        for(var element of languages){
           console.log(element);
        }

        ex2: in ra từng chữ cái trong 1 chuỗi
        var name = "lethanhtoan";
        for(var value of name){
            console.log(value);
        }
        ex3: in ra từng value của 1 object
        var myInfo = {
            name: 'Thanh Toan',
            age: 19
        }
        var valueMyInfo = Object.values(myInfo); // Object.values(<object>) hàm lấy từng value trong object
        for(var value of valueMyInfo){
            console.log(value);
        }
    + while: lặp khi điều kiện đúng
        ex: var i = 0;
        while(i<10){
            i++;
            console.log(i);
        }
    + do/while: lặp ít nhất một lần, sau đó lặp khi điều kiện đúng
        ex: var i = 0;
        do {
            i++;
            console.log(i);
        } while(i < 10);
    + break & continue loop
        ex1: 
        for(var i = 0 ; i < 10 ; i++){
            if(i >= 5){
                break;
            }
            console.log(i);
        }
        
        ex2: 
        for(var i = 0 ; i < 10 ; i++){
            if(i % 2 === 1){
                continue;
            }
            console.log(i);
        }
    + nested loop: vòng lặp lòng nhau
        ex: in ra 1 2 3 4 5 6 
        var array = [
            [1, 2],
            [3, 4],
            [5, 6]
        ];
        for(var i = 0 ; i < array.length ; i++){
            for(var j = 0 ; j < array[i].length ; j++){
                console.log(array[i][j])
            }
        }
    + forEach: thường chỉ dùng cho được mảng
        let myArr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
        myArr.forEach(function (element, index){
            console.log(element, index);
        });
    + new Set(<mảng các giá trị trùng nhau>); //trả về chuỗi các giá trị không bị trùng  
        --> trả về mảng: [...(new Set(<mảng các giá trị trùng nhau>))];
        ex:
            var notCoincident = [...new Set([1, 1, 2, 3, 4, 4, 4])];
            console.log(notCoincident);

- ARRAY METHOD: các tham số của array method là 1 function, các function có tối đa 3 tham số, 1 tham số(do mình đặt tên tham số) là chỉ có element, 2 tham số(do mình đặt tên tham số): 1 element và 1 index, 3 tham số(do mình đặt tên tham số): 1 element, 1 index, 1 originArray
    + forEach(); // duyệt qua từng element của mảng
        ex1: in ra từng element và index
        var array = ['HTML', 'CSS', 'JS'];
        array.forEach(function(arrayElement, index){ // dùng expressiton function
            console.log(arrayElement, index);
        });

        ex2: tính tổng mảng
        var array = [1,2,3,4,5];
        var sum = 0;
        array.forEach(function(element){
            sum += element;
        });
        console.log(sum);
    + every(); // kiểm tra tất cả element của mảng thoả mãn 1 điều kiện gì đó và trả về boolean (giống logic AND)
        ex: kiểm tra tất cả số trong mảng đều là số dương
        var array = [1,2,3,4,5]; 
        var checkPositiveNumber = array.every(function(element){
            return element >= 0;
        });
        console.log(checkPositiveNumber);
    + some(); // kiểm tra element của mảng, chỉ cần 1 element thoả mãn điều kiện và trả về boolean (giống logic OR)
        ex: kiểm tra trong mảng có phần tử là chuỗi 'toan'
        var array = [1,2,'toan',4,5]; 
        var checkString = array.some(function(element){
            return element === 'toan';
        });
        console.log(checkString);
    + find(); // tìm kiếm trong mảng có element nào giống element cần tìm không, nếu có thì trả về trả về chính nó (chỉ trả về một element duy nhất)
        ex1: tìm chuỗi 'toan', nếu có thì trả về chính nó
        var array = [1,2,'toan',4,5];
        var find = array.find(function(element){
            return element === 'toan';
        });
        console.log(find);

        ex2: tìm id của object trong mảng và trả về nguyên object đó dựa theo id
        var array = [
            {
                id: 1,
                name: 'toan'
            },
            {
                id: 2,
                name: 'tonii'
            }
        ];
        var find = array.find(function(element){
            return element.id === 2;
        })
        console.log(find);
    + filter(); // giống như find(), nhưng trả về được nhiều element
        ex: tìm id của object trong mảng và trả về nguyên object đó dựa theo id
        var array = [
            {
                id: 1,
                name: 'toan'
            },
            {
                id: 2,
                name: 'tonii'
            },
            {
                id: 3,
                name: 'toan'
            }
        ];
        var listFind = array.filter(function(element){
            return element.name === 'toan';
        })
        console.log(listFind);
    + map(); // lấy, thay đổi hoặc thêm các element của 1 mảng và trả về 1 mảng mới. 1 tham số là element, 2 tham số: 1 element và index, 3 tham số: 1 element, 1 index, 1 originArray(mảng gốc)
        ex: từ mảng đã có, hãy thêm key và value dựa trên mảng đã có 
        var languages = [
            {
                id: 1,
                name: 'HTML',
            },  
            {
                id: 2,
                name: 'CSS',
            },
            {
                id: 3,
                name: 'JS',
            },
            {
                id: 4,
                name: 'PHP',
            },
        ];
        var newLanguages = languages.map(function(element, index){ //newLanguages mới sẽ nhận được toàn bộ element của laguages và có thêm các key và value mới của từng element trong mảng
            return {
                id: element.id,
                name: element.name,
                type: 'built webisite', // thêm key và value mới cho mỗi element
                stringId: 'DNC ' + element.id, // thêm key và value mới cho mỗi element
                index: index
            };
        });
        console.log(newLanguages);
    + reduce(); được sử dụng khi muốn nhận được 1 giá trị duy nhất sau khi được tính toán hoặc xử lý trên từng element của mảng, ví dụ: tính tổng các số có trong mảng. Có 2 tham số trong hàm reduce: 1 function, 1 initial value(giá trị khởi tạo và cũng là giá trị tích trữ). Trong function có tối đa 4 tham số: 1 initital value(được lấy từ tham số thứ 2 hàm reduce), 1 element, 1 index, 1 ogirin array (chính là mảng gọi hàm reduce (mảng gốc)). Nhưng bình thường function ta chỉ dùng 2 tham số là initital value và element
        ex: tính tổng các coin có trong mảng courses
        var courses = [
            {
                id: 1,
                name: 'HTML',
                coin: 100,
            },
            {
                id: 2,
                name: 'CSS',
                coin: 200,
            },
            {
                id: 3,
                name: 'JS',
                coin: 300,
             },
            {
                id: 4,
                name: 'PHP',
                coin: 400,
            }
        ];
        var totalCoin = courses.reduce(function(total, currentValue){
            return total + currentValue.coin;
        }, 0); // có 2 tham số trong hàm reduce: 1 function, 1 giá trị khởi tạo. trong function có tối đa 4 tham số (lên mạng xem), nhưng ở đây mình chỉ dùng 2 tham số: 1 biến khởi tạo (biến này được nhận từ tham số thứ 2 của hàm reduce), 1 biến để lấy giá trị trong từng element của mảng courses
        console.log(totalCoin);
    +  reduce(); // chuyên sâu hơn chút
        ex1: tính tổng các coin có trong mảng courses
        var courses = [
            {
                id: 1,
                name: 'HTML',
                coin: 100,
            },
            {
                id: 2,
                name: 'CSS',
                coin: 200,
            },
            {
                id: 3,
                name: 'JS',
                coin: 300,
            },
            {
                id: 4,
                name: 'PHP',
                coin: 400,
            }
        ];
        var totalCoin = courses.reduce(function(total, course){ // đặt tên currentValue rõ ràng hơn. trong mảng courses (danh sách các course), gồm các element là course (khác nhau chữ 's', có 's' là mảng, không có là element);
            return total + course.coin;
        }, 0);
        console.log(totalCoin);
        --> tham số initial value của hàm reduce thì không bắt buộc, initial là kiểu gì thì nguyên hàm reduce sẽ return về kiểu đó, kiểu number thì sẽ trả về number, string, function, object... nhưng đa số đều nên dùng initial value để return cho tường minh và cụ thể, KHÔNG NÊN BỎ TRỐNG initial value. Nếu bỏ trống initial value thì mặc định nó sẽ lấy kiểu dữ liệu của element đầu tiên của mảng. 
        
        ex2: tính tổng các element trong mảng không cần tham số initial value
        var numbers = [1,2,3,4,5];
        var totalNumber = numbers.reduce(function(total, number){
            return total + number;   
        });
        console.log(totalNumber);
        --> các mảng flat (mảng phẳng, chỉ có 1 cấp) và cùng kiểu dữ liệu thì có thể không dùng initial value còn lại thì nên dùng initial value
        
        ex3: flat mảng từ depth mảng (làm phẳng mảng(mảng 1 cấp) từ 1 mảng sâu(mảng có nhiều cấp))
        var depthArray = [1, 2, [3, 4], 5, 6, [7, 8, 9], 10];
        var flatArray = depthArray.reduce(function(flat, depthArrayItem){
            return flat.concat(depthArrayItem);
        }, []) // initital value là 1 mảng trống
        console.log(flatArray);
        
        ex4: lấy ra các courses đưa vào 1 mảng mới
        var topics = [
            {
                topic: 'front-end',
                courses:[
                    {
                        id: 1,
                        title: 'HTML, CSS'
                    },
                    {
                        id: 2,
                        title: 'JS'
                    }
                ]
            },
            {
                topic: 'back-end',
                courses:[
                    {
                        id: 1,
                        title: 'PHP'
                    },
                    {
                        id: 2,
                        title: 'NodeJS'
                    }
                ]
            }
        ];
        var newCourses = topics.reduce(function(courses, topic){
            return courses.concat(topic.courses);
        }, []); // trả về 1 mảng các khoá học
        console.log(newCourses);
- String/Array includes(): trả về giá trị boolean (mới có từ ES6)
    + <chuỗi>.includes('<chuỗi cần tìm kiếm>', <index bắt đầu tìm>) // nếu không có tham số thứ 2 thì mặc định index = 0
        ex1: var title = 'Responsive web design';
        console.log(title.includes('web'))
        --> true
        ex2: var title = 'Responsive web design'; 
        console.log(title.includes('web', 18))
        --> false, vì index bắt đầu tìm đã vượt qua chuỗi cần tìm
    + <mảng>.includes('element cần tìm', <index bắt đầu tìm>) // cơ chế hoạt động giống string includes
- Polyfill: là 1 thuật ngữ, các tính năng mới của ES6 sẽ có thể không dùng được trên các trình duyệt cũ, và mình sẽ tự viết ra các hàm có chức năng tương tự như các tính năng mới đó.
- đối tượng map(): là một loại cấu trúc dữ liệu trừu tượng. trong đó dữ liệu được lưu dạng key/value. đối tượng map tương tự như kiểu dữ liệu object, tuy nhiên chúng khác ở chỗ là:
    + object chỉ cho phép sử dụng string làm key
    + map thì mọi kiểu dữ liệu đều có thể làm key (string, number, boolean, NaN, object, array,...)
    + các phương thức trong map:
        - new Map();
        - set Map();
        - delete, clear Map();
        - get Map();
        - size
        - has
- get(): lấy chuỗi từ URL
    ex: const URL = 'http://youtube.com?id=abc123';
    const getIdURL =  URL.get('id'); // abc123